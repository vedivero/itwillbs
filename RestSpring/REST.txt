 REST(Representational State Transfer)
  -> 하나의 URI는 하나의 고유한 리소스를 가진다라는 개념 
  http://localhost:8088/Model2JSP7/Main.me
  |        URL                            |
                      |       URI         |
                      
  * 모바일 기기가 다양해지면서 다양한 기기로 공통의 데이터를 처리 해야하는 상황
  => REST 방식이 필요한 이유
  
  * REST API : REST 방식을 사용한 API, 핵심데이터,컨턴츠,기능등을 
  외부의 페이지에서 가져와서 사용할수 있게 만들어 놓은 인터페이스 
   => REST방식의 서비스 제공이 가능한 형태 "Restful 하다"
   
  * REST 개발을 위한 제약조건
    - client - server : 요청,제공 진영은 표준 인터페이스를 사용해서 구분, 상호 독립적이어야한다.
    - stateless : 클라이언트의 컨텍스트가 서버에 저장되지 않고 클라이언트에 저장
    - cache : 서버의 응답은 캐싱될수 있어야하며, 이를 사용해서 확장성,성능을 개선
    - uniform interface : 표준 인터페이스가 있기때문에, 각각 서버/클라이언트를 발전가능(아키텍처 디커플링)
     -> 1) 리소스는 URI로 구분 되어야함.
     -> 2) 리소스를 생성,수정,추가할때  http메세지(상태정보)를 사용해서 전달
     -> 3) 메세지는 스스로 설명가능해야한다. 
     -> 4) 프로그램의 상태는 하이퍼링크를 사용해서 전달가능 해야한다.     
    - layerd system : 클라이언트와 서버사이의 부하분산, 캐싱과 같은 중개서버를 사용가능
    - code-on-demand : Java Applet/Script를 통해서 클라이언트가 사용가능한 코드를 제공(옵션)
    
    
    * SOAP : xml데이터를 사용해서 헤더,바디를 생성후 text/xml 형태로 정보전달
   
  
  https://docs.microsoft.com/ko-kr/azure/architecture/best-practices/api-design
  
  
  * ResponseEntity 타입(클래스)
  -> @RestController는 결과로 view 페이지를 제공X
     에러가 났는지, 정상적인 처리가 되었는지 구분이 어려움
     
     https://ko.wikipedia.org/wiki/HTTP_%EC%83%81%ED%83%9C_%EC%BD%94%EB%93%9C
     https://developer.mozilla.org/ko/docs/Web/HTTP/Status
     웹 HTTP상태(status)코드
     
     * 100번~ : 현재 데이터의 처리중인 상태
      - 100 : 데이터의 일부만 서버가 받은상태 
     * 200번 ~ : 정상적 응답상태
      - 200 : 에러가 없이 정상처리된 상태
      - 204 : 정상처리는 되었으나, 서버에 전달할 값이 없는경우
     * 300번 ~ : 다른 URL을 처리상태
      - 301 : 요청된 페이지가 새 URL으로 변경
      - 304 : 이미 기존의 데이터와 변경이 없는경우
     * 400번 ~ : 서버에서 인식불가 상태
      - 400 : 전송된 Request에 문제가 있어서 서버가 인지못하는 경우
      - 403 : 서버에서 허락되지 않는 경우(접근권한 x)
      - 404 : URL에 해당하는 자원을 찾을수 없는경우
      - 406 : 전송 방식의 오류 발생(REST작동시 주로 발생)
     * 500번 ~ : 서버 내부의 문제가 발생한 상태
      - 500 : 서버에서 처리시 문제가 발생   
      - 502 : 게이트웨이,프록시 상태의 문제(과부화)
      - 503 : 일시적인 과부하, 서비스 중단 (서버가 요청 처리준비 안된경우)
      - 504 : 지정된 처리시간이 지나서 처리를 못하는 경우 
 
 
   * Rest 방식의 사용원칙
    - URI가 원하는 리소스를 의미한다. (영어 복수형으로 주소를 사용)
    - URI에는 식별할 수 있는 데이터를 전달하는것이 일반적인 방법
    
    
   ex) 게시판 - CRUD
   ~/boards/123   =>  123번 글을 조회 
   ~/boards/123/replies/11 => 123번글의 11번째 댓글 조회
   ~/boards/123/11  => 123번글의 11번째 댓글 조회
   ~/boards/ => 신규 글 작성
   
   * 페이지 전달 방식
   ~/boards/123  (GET) : 자료 조회용
   ~/boards/123  (DELETE) : 자료 삭제용
   ~/boards/ ,~/boards/new/ (POST) : 신규 자료작성용
   ~/boards/123  (PUT(전체수정),PATCH(일부수정)) : 자료 수정용
   
   => [/작업명/기본키 + 메서드 + 데이터] 형태로 REST방식 요청
   
   
    
       
    
  
  
  
  
  
  
                        