  동기 방식의 데이터 처리
 => 데이터를 전달/처리하기 위해선 페이지 이동 O(화면 전환 O)
 => 서버에 요청(신호)을 보내고 응답을 받아야지만 실행가능
 
  사용자  -> 페이지 요청(request) -> 서버
  사용자  <- 페이지 응답(response) <- 서버

  비동기 방식의 데이터 처리
  => 데이터를 전달/처리하기 위해선 페이지 이동 O (화면 전환 X)
  => 서버에 요청(신호)을 보내고 응답결과와 상관없이 실행가능 
  
  사용자  <-> 페이지 요청(request) / 페이지 응답(response) <-> 서버
  
 * Ajax (Asynchronous JavaScript and XML)
 => 비동기방식의 javascript, xml을 Ajax라고한다.
  - 조금더 빠른 페이지 구성을 하기위해 구현된 기술
  - 페이지 전체를 로드하지 않고, 페이지 일부분만 로드해서 처리 가능
  - 백그라운드 영역에서 서버와 통신 => 페이지 일부분에 표시 가능
  - XML,HTML,텍스트파일,JSON 데이터를 처리 가능
  
  * 장점 
  - 전체 페이지 로드 없이 일부분만 로드 가능
  - 페이지 로드 완료시에도 서버로 데이터 전송가능 / 서버로 부터 데이터 받기 가능
  - 페이지가 깔끔해진다
  
  * 단점
  - 결국 Ajax동작도 페이지 이동을 하는것(많으면 처리가 느려짐)
  - 클라이언트가 서버에 데이터를 요청하는 '클라이언트 풀링' 방식 사용
    => '서버 푸시' 방식의 실시간 데이터 처리는 불가능
  - 바이너리 데이터를 전달 불가함.
  - Ajax 스크립트가 포함되어있지 않는 서버로 요청을 보낼순 없음
  - 클라이언트 PC로 요청을 보낼수 없음.
  
   
   '클라이언트 풀링' : 사용자가 원하는 정보를 서버에 요청해서 해당정보를 받는 방식
    '서버 푸시' : 사용자가 원하지 않아도 서버가 자동으로 특정정보를 제공하는 방식
    
   Ajax 프레임워크 -> JQuery 프레임워크 를 사용해서 주로 구현
   
   
   XMLHttpReqeust 객체 
   - 비동기방식으로 데이터 전송, 수신 하는 객체 
   - Ajax 방식의 데이터 처리를 하는 핵심 객체 
   - 거의 대부분의 브라우저들이 지원하는 객체 (크롬,사파리,오페라,IE...)
   
     
    
  * Ajax요청에 따른 응답
  1) html - 웹페이지 일부를 업데이트
         응답 처리가 간결함.
         브라우저 별로 별도의 처리가 필요없음 (바로 사용)
     -
         서버가 사용가능한 페이지를 리턴,
         데이터 이식성이 좋지 않음.
      * 요청이 반드시 같은 도메인으로 처리 되야함
      (www.itwillbs.co.kr 요청~> www.itwillbs.co.kr 에서 응답)   
  
  2) xml - html 유사하게 사용. 태그의 이름이 다름
         태그의 데이터를 지정해서 사용가능(거의 모든 플랫폼에서 사용)
         다양한 데이터타입의 구조 표현 가능, html태그와 유사하게 처리 가능
     -
         데이터 처리시 많은 리소스가 필요함, 많은양의 코드가 필요함
      * 요청이 반드시 같은 도메인으로 처리 되야함
      (www.itwillbs.co.kr 요청~> www.itwillbs.co.kr 에서 응답)            
         
  
  3) JSON - 자바스크립트 객체 표현식 (JavaScript Object Natation)
    html/xml 보다 간결한 데이터 처리 가능 (이름:값 -쌍)
       다른 도메인 요청에서도 사용가능
    -
       문법이 예민하다.(콤마,따옴표,콜론.... 문법을 잘 처리해야함)-> 파일 전체 사용 불가
       악의적의 목적의 객체를 사용가능 (신뢰된 페이지에서만 사용가능하게 처리 )
       
       
   * JSON 문법 (속성-값)
   
   * 속성(key)- 값(value) 쌍으로 구성
     "속성"   - 자료형 타입
     
   * 속성 구분시 ,(콤마) 구분
   
   {  } - JSON 객체
   [  ] - JSON 배열
   
   
   * 자료형
    - 정수형(10진수) (2,8,16진수x)
    - 실수형(고정 소수점, 부동 소수점) -123.123 / 1e4, 2.4E-5
    - 논리형(true,false)
    - Null
    - 문자형(문자열) - ""안에 추가 (유니코드 사용), 이스케이프 문법지원(\n,\t)
    - 배열( 타입 상관없이 모두 저장 가능 )
    
    ex)
    [
    	{"name": "홍길동" }
    ]
    
        배열 안에 객체 2개를 저장
        객체는 각각의 이름,나이 정보를 저장 가능
    
    [
      {
        "이름":"홍길동",
        "나이":20
      },
      {
        "이름":"갑돌이",
        "나이":30
      }
    ]
    
    * JSON 배열 안에  객체를 저장하는게 가능하다 - O
    * JSON 객체 안에 배열을 저장하는게 가능하다 - O
    
    {
      "name":"kim",
      "age":30,
      [30,111,"abc"]
    }
    
    * 사용하는 거의 모든 브라우저에는 JSON타입을 처리하는 JSON파서가 
    포함되어 있음( 브라우저에서 파일이 열림 )
           
    
   
   
   
       
    
  
  
  
  
  
  
  
  
  
  
  
  