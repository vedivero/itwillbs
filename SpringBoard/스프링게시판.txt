 * 프로젝트 시작전
  - DB 
    사용 계정 생성 (root/1234)
    디비 생성 (springdb)
    테이블 생성 + 설계 (관계 설정)
    더미데이터 추가
    
  - MVC 
    패키지 구조 결정
    개발역활 구분 -> 할당
    테스트 처리 여부
  
  - 화면 
    화면 출력 방식 결정(html,js/jsp)
    경로 설정 (절대경로,상대경로)
  
  
  
CREATE TABLE `tbl_board` (
  `bno` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) NOT NULL,
  `content` text,
  `writer` varchar(200) NOT NULL,
  `regdate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `viewcnt` int(11) DEFAULT '0',
  PRIMARY KEY (`bno`)
)

 * 예외 처리 
 
 - Controller 에서 예외 처리 하는 방법
  1) @ExceptionHandler 애노테이션
  2) @ControllerAdvice 사용
  3) @ReqeustStatus사용 (HTTP 상태코드)
  
  -> 1번을 클래스에 적용, 각각의 동작(메서드)을 2번 사용 처리  
  
  
 * (게시판) 페이징 처리
  1) 필요한 만큼의 데이터를 전송(처리)
  2) 서버에서 처리 가능한 가장 빠른 속도로 페이지 처리 
  
  
  * 페이징 처리 방식
  - <a> 태그  : href 이동할 URI를 지정
  => 검색엔진 노출이 매우 효과적. (한번에 정보 파악하기 쉬움)
  => 반복적인 링크정보 필요
   
  - <form> 태그 : action 이동, 추가적인 정보를 가지고 이동
  => 간결한 페이지 이동, 필요한 데이터 추가저장
  => 깔끔한 처리동작
  
  * 페이징 원칙
  - 페이징처리는 반드시 GET방식 처리로 해야함
  => 사용자에게 URL으로 정보 전달
  - 페이징처리 완료시 반드시 '목록가기' 동작 있어야함
  - 3페이지의 글을 읽고 다시 목록으로 돌아갈때, 다시 3페이지로 이동해야함
  - 페이징 처리시 반드시 필요한 페이지 번호만 제공
  - 페이징 처리의 크기에 따라서 [이전],[다음]동작을 구현 
  
  
  * 페이징 처리 개발순서
  - 페이지 데이터가 화면에 출력
  - 화면 하단에 보이는 페이징처리 
  - 본문 -> 리스트이동시 페이징처리 
  
  * 더미데이터 생성
	insert into tbl_board (title,content,writer) 
	(select title,content,writer from tbl_board);


  * 페이지 하단부 페이징처리 
  
   - 시작 페이지 번호(startPage) 
     : 화면에 10개의 페이지번호 데이터를 출력
       [이전]페이지 이동을 제어
      ex)   1 .... 10  / [이전] 11 ..... 20
   - 끝 페이지 번호(endPage)
     : 시작페이지 번호에서 몇개 보여줄건지 결정
     ex) 총 65개 페이지당 5개씩 출력 => 13개의 페이지 필요
     
   - 전체 데이터의 개수(totalCount)
   - [이전]페이지 이동 (prev)
      : 시작페이지가 1이 아닌경우 생성
   - [다음]페이지 이동 (next)
      : 제일 끝페이지 페이지블럭
      
    //  페이지번호 3 , 총글 : 122개 , 한페이지 10개 출력, 페이지번호 10개
    // 13개 페이지 필요
    - startPage : 1
    - endPage : 10
    - next : O
    - prev : X
   
   //  총글 : 122개 , 한페이지 10개 출력,
   //  페이지번호 10개 출력 => 13개 페이지 필요
   // 페이지 번호 10번
    - startPage : 1
    - endPage : 10
    - next : O
    - prev : X
    
   //  총글 : 122개 , 한페이지 10개 출력,
   //  페이지번호 10개 출력 => 13개 페이지 필요
   // 페이지 번호 11번
    - startPage : 11
    - endPage : 13
    - next : X
    - prev : O
    
    
   - 페이징처리를 하기위한 객체 
    ------------------------------
     // 페이지 이동시 가져올 데이터
     [Criteria 객체]
     page - 현재 페이지 번호
     pageSize - 한 페이지에 출력할 개수   
    -------------------------------
    // DB에서 계산해서 가져오기
    totalCount - 총 글의 수
    --------------------------------
    // 직접 계산해서 가져올 데이터
    startPage - 시작페이지 번호
    endPage - 끝페이지 번호
    prev - [이전] 
    next - [다음]
       
   
   
	
	
  
  
  
  
  
 





  
  
  