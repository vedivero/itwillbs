
SPRING Framework
 
  프레임워크란? 어떤것을 구성하는 구조/뼈대/틀 
 => 사용될 기능을 클래스/인터페이스로 만들어놓고 제공해주는 형태
 => 직접적인 구현X, 활용O
 
 프레임워크의 등장배경 => 기존의 언어의 불편함을 개선하기위해서 
 => 개발 생산성 향상 =>[ 시간 -> 완성 ]
 => 개발실력 평준화 
 
 Spring - 자바 웹 애플리케이션을 생성하기위한 오픈소스
        - 경량 프레임워크 / 경량 컨테이너
        - EJB(Enterprise Java Beans)프레임워크 : 스프링 이전에 사용됨
        
        
        * 톰캣(서블릿 컨테이너) : 서블릿 생성,초기화,서비스 실행,
               서비스 소멸등 모든 서블릿에 관한 권한을 가지고 있음
   
   * 스프링 특징
   - 제어의 역행 (IoC, Inversion of Control)
    => 서블릿/빈 개발자가 코드로 작성X, 프레임워크로 수행
   - 의존성 주입(DI, Dependency Injection)
    => 클래스를 사용한 객체를 개발자가 코드로 생성X, 프레임워크가 생성 사용
   - 관점 지향 (AOP, Aspect-Oriented Programming)
    => 핵심기능(주요기능) 제외한 부수적인 기능을 프레임워크가 생성 제공
   - 영속성-(DB)
   - 라이브러리 연동 제공
   - POJO(Plain Old Java Object) 방식 프레임워크
   
  
  * 스프링 주요 기능
  SPRING Core : 다른 기능과 설정값을 분리하기위한 IoC 기능을 제공
    "	 Context : 스프링의 기본기능, 애플리케이션을 작동하는 Bean(객체)에 대한 접근 처리 
   	"	 DAO : JDBC 기능을 활용 가능(향상된 기능)
   	"	 ORM : 마이바티스와 같은 영속성 프레임워크 연동기능 제공
   	"	 AOP : 관점지향 프로그래밍 제공
   	"	 Web : 웹 개발에 필요한 기능 제공
   	"	 WebMVC : 스프링에서 MVC구현에 관한 기능 제공
   
   
   * 의존성 주입 / 제어의 역행
      DI      / IoC
    
    -제어의 역행 : 객체,메서드 호출시 처리 X -> 외부(SPRING)에서 처리O
    => '블럭 끼워넣기' 개발
    => '구조를 설계할수 있다'
    - DI(의존성주입) : 제어의 역행이 발생할때 스프링 내부에 있는 객체가
          해당클래스를 사용할때 필요한 관계를 관리하는 동작/기법
          
    - 의존성(Dependency) : 객체가 혼자서는 처리할수 없음을 표현      
      -> 객체의 직접 생성 구현(JSP-model2 ex) DAO )
      -> 관계를 약화시키면서 간접 구현(호출)
      -> A 객체가 B객체를 사용해서 동작해야한다면
        ' A는 B에 의존적이다' 
      
    - 객체를 직접 생성/제어하는 것이 아니라, 제어의 역행을 사용해서
     특정 객체를 필요한 객체에 외부에서 가져다 연결 => DI(의존성 주입)
     
   - 의존성 주입 
     1) 생성자를 통한 주입
     2) set메서드 사용한 주입    
     
   - 강한 결합 / 약한 결합
   => [자동차] -> 에어컨 고장-> 에어컨 수리 : 기능별 독립처리  
              -> 에어컨 고장-> 엔진 수리 : 구조 변경
    =>  "관련 있는 동작은 강한결합, 관련이 없는 동작 약한결합" 
    => [인터페이스 - 서브클래스 관계]를 사용하여  약한결합 생성
    
    
    * AOP (관점 지향 프로그래밍)
    : 쇼핑몰 개발자 -> 쇼핑몰 정보 처리 
    : 보안 처리 -> Spring 프레임워크
    
    - 메서드/객체 안에 주기능과 보조기능으로 분리한후 선택적으로
           적용해서 사용하는 방법
      => 전체 코드에 흩어져있는 보조기능들을 한곳에 모아서 처리가 가능
      => 필요시마다 (주기능이 사용될때) 선택적으로 보조기능 사용
      => 코드가 단순해짐 , 가독성 향상 (중복된 코드 제거)
     => 주로 로깅,보안,트렌젝션 처리에서 사용
     
   * AOP 관련 용어
    aspect : 구현하고자 하는 보조 기능  
    advice : aspect의 실체 (구현해놓은 클래스). 
                        메서드 호출기준으로 여러지점에서 호출 가능
    joinpoint : advice를 적용하는 지점.
                              스프링에서는 method 결합점만 제공
    pointcut : advice가 적용되는 대상지정.
                         패키지 이름/클래스이름/메서드이름을 정규식으로 지정후 처리
    target : advice가 적용되는 클래스를 의미함.
    weaving : advice를 주 기능에 적용하는 것                     
                         
                         
    * 스프링API를 활용한 AOP구현
    1) target 클래스를 지정                      
    2) advice 클래스를 지정
    3) 설정파일(SPRING)에서 pointcut 지정(설정)
    4) 설정파일(SPRING)에서 advice와 pointcut을 결합하는  advicer설정
    5) 설정파일에서 ProxyFactoryBean클래스(SPRING에서 제공)를 사용해서
      target에 advice를 적용(설정)
    6) getBean()메서드로 해당 빈(객체) 접근해서 사용  
    
    
     * 스프링 API에서 제공하는 Advice인터페이스
     
             (인터페이스)    -  (추상메서드)
     - MethodBeforeAdvice  - before()
       => 해당 메서드 실행전에 실행기능
     - AfterReturningAdvice - afterReturning()
       => 해당 메서드 실행후 실행
     - ThrowsAdvice         - afterThrowing()
       => 해당 메서드에서 예외가 발생시 실행
     - MethodInterceptor    - invoke()
       => 해당 메서드의 실행전 / 후, 예외 발생시 실행 (위 3가지 기능을 한번에 처리)  
      
   
   
   
               
        
 
 
 
 
 
 


